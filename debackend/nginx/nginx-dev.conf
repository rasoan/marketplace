# todo: задача, нужно попытаться получить порты и прочие штуки из .enc файла, пока что этого сделать не удалось - захардкодил здесь
worker_processes  1;

events {
    worker_connections  1024;
}
http {
    server {
        listen 80;
        listen [::]:80;

        server_name localhost admin.localhost steam.localhost;
        server_tokens off;

        # graphql не работает без этого, т.е. даже запросы с фронт контейнера на бек контейнер не идут,
        # хотя это внутри сети docker.compose, вот так он принуждает открыть доступ снаружи к graphql
        # Это вообще костыль, зачем сюда его выносить не понятно, но по другому контейнеры друг с другом не общаются!!!
        location /graphql {
            proxy_pass http://deshopbackend:8081/graphql;

            # ---------- ---------- ---------- Subscriptions для GQL не работают без этого блока кода ---------- ---------- ----------
            # Настройки для WebSocket
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # Установите таймауты для поддержания долгих соединений
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
            # ---------- ---------- ---------- Subscriptions для GQL не работают без этого блока кода ---------- ---------- ----------

            # Разрешаем CORS dev
            add_header 'Access-Control-Allow-Origin' "$http_origin" always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, Origin, X-Requested-With' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            # Обработка OPTIONS-запросов
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' "$http_origin" always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, Origin, X-Requested-With' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                return 204;
            }
        }

        # Код от GPT решил задачу с прокидываением через /api/ запросов на бек
        # todo: нужно сделать так, что бы через api и graphql ходил, тогда у нас будет одна точка входа на бек, а пока что их 2
        #
        # proxy_pass http://deshopbackend:8081/; — Обратите внимание на завершающий /. Это означает, что /api/ на исходном сервере будет заменено на / на сервере назначения.
        #
        # rewrite ^/api(/.*)$ $1 break; — Эта строка удаляет префикс /api из пути запроса перед его отправкой на проксируемый сервер, чтобы избежать дублирования.
        #
        # Теперь запрос на http://localhost:8081/api/notification_payplych будет проксирован как http://deshopbackend:8081/notification_payplych, что решит проблему с дублированием.
        location /api/ {
            proxy_pass http://deshopbackend:8081/;
            rewrite ^/api(/.*)$ $1 break;
        }

        location /pgadmin {
            proxy_set_header X-Script-Name /pgadmin;
            proxy_set_header Host $host;
            proxy_pass http://pg_admin_deshopbackend;
            proxy_redirect off;
        }

        location /database {
            proxy_pass http://pg_deshopbackend:5432;
        }

        # Настройки для проксирования WebSocket Next hot reload
        location /_next/webpack-hmr {
            proxy_pass http://deshopfrontend:3000/_next/webpack-hmr;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        # Остальные Next.js ассеты
        location ~ ^/(_next|__next) {
            proxy_pass http://deshopfrontend:3000;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # Redirect all other pages, API routes and assets to Next.js.
        location / {
            proxy_set_header Host $host;

            proxy_pass http://deshopfrontend:3000$request_uri;
        }
    }
}
