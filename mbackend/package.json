{
  "name": "deshop",
  "version": "0.0.1",
  "description": "",
  "author": "",
  "private": true,
  "license": "UNLICENSED",
  "scripts": {
    "restart:nginx-dev": "IS_RESTART_NGINX=1 NODE_ENV=dev ./run.sh",
    "restart:nginx": "IS_RESTART_NGINX=1 NODE_ENV=prod ./run.sh",
    "stop:nginx": "docker stop deshop-nginx-1 && docker rm deshop-nginx-1 && docker rmi nginx",
    "start:dev": "NODE_ENV=dev ./run.sh",
    "start:force-dev": "IS_MODE_FORCE=1 pnpm run start:dev",
    "start": "NODE_ENV=prod ./run.sh",
    "start:force": "IS_MODE_FORCE=1 pnpm run start",
    "cert:check": "docker compose -f docker-compose-prod.yml run --rm  certbot certonly --webroot --webroot-path /var/www/certbot/ --dry-run -d dessly.net -d steam.dessly.net -d admin.dessly.net",
    "cert:get": "docker compose -f docker-compose-prod.yml run --rm certbot certonly --webroot --webroot-path /var/www/certbot/ -d dessly.net -d steam.dessly.net -d admin.dessly.net",
    "cert:update": "docker compose -f docker-compose-prod.yml run --rm certbot renew",
    "docker:removeCache": "docker system prune -a",
    "delete:ci": "docker rm $(docker ps -qa) -f && docker rmi $(docker images -a -q) -f",
    "delete:c": "docker rm $(docker ps -qa) -f",
    "delete:i": "docker rmi $(docker images -a -q) -f",
    "build": "nest build",
    "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\"",
    "start:nest": "nest build --webpack --webpackPath webpack-hmr.config.js --watch",
    "start:debug": "nest start --debug --watch",
    "start:prod": "node dist/main",
    "lint": "eslint \"{src,apps,libs,test}/**/*.ts\" --fix",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:cov": "jest --coverage",
    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",
    "test:e2e": "jest --config ./test/jest-e2e.json"
  },
  "dependencies": {
    "@nestjs/apollo": "12.2.0",
    "@nestjs/axios": "^3.0.3",
    "@nestjs/common": "10.0.0",
    "@nestjs/config": "3.2.3",
    "@nestjs/core": "10.0.0",
    "@nestjs/event-emitter": "^2.0.4",
    "@nestjs/graphql": "12.2.0",
    "@nestjs/mongoose": "10.0.6",
    "@nestjs/platform-express": "10.0.0",
    "@types/pg": "8.11.6",
    "axios": "^1.7.5",
    "class-transformer": "0.5.1",
    "class-validator": "0.14.1",
    "deshopfrontend": "link:../deshopfrontend",
    "detools": "link:../detools",
    "dotenv": "16.4.5",
    "eslint-plugin-import": "2.29.1",
    "express": "^4.21.0",
    "graphql": "16.9.0",
    "graphql-subscriptions": "^2.0.0",
    "mongoose": "8.4.1",
    "pg": "8.12.0",
    "reflect-metadata": "0.2.0",
    "rxjs": "7.8.1",
    "zod": "3.23.8"
  },
  "devDependencies": {
    "@babel/eslint-parser": "7.17.0",
    "@nestjs/cli": "10.0.0",
    "@nestjs/schematics": "10.0.0",
    "@nestjs/testing": "10.0.0",
    "@rushstack/eslint-patch": "1.1.0",
    "@types/express": "4.17.17",
    "@types/jest": "29.5.2",
    "@types/node": "20.3.1",
    "@types/supertest": "6.0.0",
    "@typescript-eslint/eslint-plugin": "5.12.1",
    "@typescript-eslint/parser": "5.12.1",
    "@typescript-eslint/typescript-estree": "5.12.1",
    "@typescript-eslint/utils": "5.12.1",
    "eslint": "8.42.0",
    "eslint-config-prettier": "9.0.0",
    "eslint-plugin-jest": "26.1.1",
    "eslint-plugin-node": "11.1.0",
    "eslint-plugin-prettier": "5.0.0",
    "eslint-plugin-promise": "6.0.0",
    "eslint-plugin-react": "7.28.0",
    "eslint-plugin-react-hooks": "4.2.1-rc.0-next-2c693b2de-20220223",
    "eslint-plugin-unicorn": "41.0.0",
    "jest": "29.5.0",
    "prettier": "3.0.0",
    "run-script-webpack-plugin": "0.2.0",
    "source-map-support": "0.5.21",
    "supertest": "6.3.3",
    "ts-jest": "29.1.0",
    "ts-loader": "9.4.3",
    "ts-node": "10.9.1",
    "tsconfig-paths": "4.2.0",
    "typescript": "5.1.3",
    "webpack": "5.92.0",
    "webpack-node-externals": "3.0.0"
  },
  "jest": {
    "moduleFileExtensions": [
      "js",
      "json",
      "ts"
    ],
    "rootDir": "src",
    "testRegex": ".*\\.spec\\.ts$",
    "transform": {
      "^.+\\.(t|j)s$": "ts-jest"
    },
    "collectCoverageFrom": [
      "**/*.(t|j)s"
    ],
    "coverageDirectory": "../coverage",
    "testEnvironment": "node"
  }
}
